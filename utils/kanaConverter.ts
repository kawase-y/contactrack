// 漢字からひらがなへの変換マッピング（一般的な名前用）
const kanjiToKanaMap: Record<string, string> = {
  // 姓に多い漢字
  '田': 'た', '中': 'なか', '山': 'やま', '川': 'がわ', '木': 'き',
  '本': 'もと', '井': 'い', '村': 'むら', '橋': 'はし', '野': 'の',
  '藤': 'ふじ', '松': 'まつ', '竹': 'たけ', '林': 'はやし', '森': 'もり',
  '石': 'いし', '金': 'きん', '銀': 'ぎん', '水': 'みず', '火': 'ひ',
  '土': 'つち', '大': 'おお', '小': 'こ', '高': 'たか', '安': 'やす',
  '新': 'しん', '古': 'ふる', '上': 'うえ', '下': 'した', '前': 'まえ',
  '後': 'うしろ', '東': 'ひがし', '西': 'にし', '南': 'みなみ', '北': 'きた',
  '白': 'しろ', '黒': 'くろ', '青': 'あお', '赤': 'あか', '緑': 'みどり',
  '原': 'はら', '島': 'しま', '崎': 'さき', '沢': 'さわ', '谷': 'たに',
  '池': 'いけ', '堀': 'ほり', '関': 'せき', '内': 'うち', '外': 'そと',
  '渡': 'わた', '長': 'なが', '清': 'きよ', '吉': 'よし',
  '福': 'ふく', '富': 'とみ', '岡': 'おか', '坂': 'さか', '丸': 'まる',
  
  // 名前に多い漢字
  '太': 'た', '郎': 'ろう', '子': 'こ', '美': 'み', '花': 'はな',
  '雄': 'お', '男': 'お', '雅': 'まさ', '正': 'まさ', '真': 'ま',
  '一': 'いち', '二': 'に', '三': 'さん', '四': 'し', '五': 'ご',
  '六': 'ろく', '七': 'なな', '八': 'はち', '九': 'きゅう', '十': 'じゅう',
  '次': 'じ', '介': 'すけ', '助': 'すけ', '也': 'や', '哉': 'や',
  '樹': 'き', '和': 'かず', '宏': 'ひろ', '博': 'ひろ', '明': 'あき',
  '聡': 'さとし', '智': 'とも', '健': 'けん', '強': 'つよし', '勇': 'いさむ',
  '愛': 'あい', '恵': 'めぐみ', '香': 'かおり', '佳': 'か', '加': 'か',
  '奈': 'な', '菜': 'な', '那': 'な', '直': 'なお', '成': 'なる',
  '幸': 'さち', '希': 'のぞみ', '望': 'のぞみ', '夢': 'ゆめ', '光': 'ひかり',
  '優': 'ゆう', '由': 'ゆ', '友': 'とも', '史': 'ふみ', '文': 'ふみ',
  '葉': 'は', '紗': 'さ', '沙': 'さ', '彩': 'あや', '綾': 'あや',
  '理': 'り', '里': 'り', '莉': 'り', '麻': 'ま', '万': 'ま',
  '千': 'ち', '百': 'もも', '世': 'よ'
}

// 複数文字の名前パターン
const multiCharPatterns: Record<string, string> = {
  // 姓のパターン
  '山田': 'やまだ',
  '田中': 'たなか', 
  '佐藤': 'さとう',
  '高橋': 'たかはし',
  '渡辺': 'わたなべ',
  '伊藤': 'いとう',
  '中村': 'なかむら',
  '小林': 'こばやし',
  '加藤': 'かとう',
  '吉田': 'よしだ',
  '山本': 'やまもと',
  '松本': 'まつもと',
  '井上': 'いのうえ',
  '木村': 'きむら',
  '林田': 'はやしだ',
  
  // 名前のパターン
  '太郎': 'たろう',
  '次郎': 'じろう',
  '三郎': 'さぶろう',
  '四郎': 'しろう',
  '花子': 'はなこ',
  '美子': 'みこ',
  '裕子': 'ゆうこ',
  '真理': 'まり',
  '美香': 'みか',
  '由美': 'ゆみ',
  '直美': 'なおみ',
  '智子': 'ともこ',
  '恵子': 'けいこ',
  '佳子': 'かこ',
  '加奈': 'かな',
  '麻衣': 'まい',
  '彩香': 'あやか',
  '美穂': 'みほ',
  '裕介': 'ゆうすけ',
  '健太': 'けんた',
  '翔太': 'しょうた',
  '雄大': 'ゆうだい',
  '智也': 'ともや',
  '和也': 'かずや',
  '大輔': 'だいすけ',
  '康介': 'こうすけ'
}

export const kanaConverter = {
  // 漢字をひらがなに変換
  convertToKana(text: string): string {
    if (!text) return ''
    
    // 複数文字パターンを先にチェック
    if (multiCharPatterns[text]) {
      return multiCharPatterns[text]
    }
    
    // 一文字ずつ変換
    let result = ''
    for (const char of text) {
      if (kanjiToKanaMap[char]) {
        result += kanjiToKanaMap[char]
      } else if (this.isHiragana(char) || this.isKatakana(char)) {
        // ひらがな・カタカナはそのまま（カタカナは変換しない）
        result += char
      } else if (this.isKanji(char)) {
        // マッピングにない漢字は空文字（ユーザーが手動入力）
        result += ''
      } else {
        // その他の文字（アルファベット等）はそのまま
        result += char
      }
    }
    
    return result
  },

  // ひらがなかどうかチェック
  isHiragana(char: string): boolean {
    const code = char.charCodeAt(0)
    return code >= 0x3041 && code <= 0x3096
  },

  // カタカナかどうかチェック
  isKatakana(char: string): boolean {
    const code = char.charCodeAt(0)
    return code >= 0x30A1 && code <= 0x30F6
  },

  // 漢字かどうかチェック
  isKanji(char: string): boolean {
    const code = char.charCodeAt(0)
    return (code >= 0x4E00 && code <= 0x9FAF) || // CJK統合漢字
           (code >= 0x3400 && code <= 0x4DBF) || // CJK拡張A
           (code >= 0x20000 && code <= 0x2A6DF)  // CJK拡張B
  },

  // カタカナをひらがなに変換
  katakanaToHiragana(text: string): string {
    return text.replace(/[\u30A1-\u30F6]/g, (char) => {
      return String.fromCharCode(char.charCodeAt(0) - 0x60)
    })
  }
}